// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kLKJdWcWvhmzg2QkhYCgpB
// Component: 6MIIJdG2Xkzw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ProductBox } from "@plasmicpkgs/commerce";
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductPriceComponent } from "@plasmicpkgs/commerce";
import LinkButton from "../../LinkButton"; // plasmic-import: RQcc0p_XJRvD/component
import { ProductMedia } from "@plasmicpkgs/commerce";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: kLKJdWcWvhmzg2QkhYCgpB/projectcss
import sty from "./PlasmicProductCarousel.module.css"; // plasmic-import: 6MIIJdG2Xkzw/css

import DotCircleOIcon from "./icons/PlasmicIcon__DotCircleO"; // plasmic-import: Bf-nGqX5ttPr/icon
import CircleOIcon from "./icons/PlasmicIcon__CircleO"; // plasmic-import: KWqzca3_KVfV/icon

createPlasmicElementProxy;

export type PlasmicProductCarousel__VariantMembers = {
  slider: "first" | "second" | "third";
};
export type PlasmicProductCarousel__VariantsArgs = {
  slider?: SingleChoiceArg<"first" | "second" | "third">;
};
type VariantPropType = keyof PlasmicProductCarousel__VariantsArgs;
export const PlasmicProductCarousel__VariantProps = new Array<VariantPropType>(
  "slider"
);

export type PlasmicProductCarousel__ArgsType = {};
type ArgPropType = keyof PlasmicProductCarousel__ArgsType;
export const PlasmicProductCarousel__ArgProps = new Array<ArgPropType>();

export type PlasmicProductCarousel__OverridesType = {
  root?: Flex__<"div">;
  productBox?: Flex__<typeof ProductBox>;
  text?: Flex__<"div">;
  productPrice?: Flex__<typeof ProductPriceComponent>;
  productMedia?: Flex__<typeof ProductMedia>;
};

export interface DefaultProductCarouselProps {
  slider?: SingleChoiceArg<"first" | "second" | "third">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductCarousel__RenderFunc(props: {
  variants: PlasmicProductCarousel__VariantsArgs;
  args: PlasmicProductCarousel__ArgsType;
  overrides: PlasmicProductCarousel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "slider",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.slider
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <ProductBox
        data-plasmic-name={"productBox"}
        data-plasmic-override={overrides.productBox}
        className={classNames("__wab_instance", sty.productBox, {
          [sty.productBoxslider_second]: hasVariant($state, "slider", "second"),
          [sty.productBoxslider_third]: hasVariant($state, "slider", "third")
        })}
        id={
          hasVariant($state, "slider", "third")
            ? "valvet-accent-arm-chair"
            : hasVariant($state, "slider", "second")
            ? "mapple-wood-accent-chair"
            : "cloth-covered-accent-chair"
        }
      >
        <DataCtxReader__>
          {$ctx => (
            <React.Fragment>
              <div className={classNames(projectcss.all, sty.freeBox__cU4T)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cHxrH, {
                    [sty.freeBoxslider_first__cHxrHoKyp]: hasVariant(
                      $state,
                      "slider",
                      "first"
                    ),
                    [sty.freeBoxslider_second__cHxrH3Xw76]: hasVariant(
                      $state,
                      "slider",
                      "second"
                    ),
                    [sty.freeBoxslider_third__cHxrHqRaeT]: hasVariant(
                      $state,
                      "slider",
                      "third"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Great Design Collection"}
                  </div>
                  <ProductTextField
                    className={classNames(
                      "__wab_instance",
                      sty.productTextField__nrEed
                    )}
                    field={"name"}
                  />

                  <ProductTextField
                    className={classNames(
                      "__wab_instance",
                      sty.productTextField__wMgy
                    )}
                    field={"description"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___2J8F)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ygZ8D)}
                    />

                    <ProductPriceComponent
                      data-plasmic-name={"productPrice"}
                      data-plasmic-override={overrides.productPrice}
                      className={classNames("__wab_instance", sty.productPrice)}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___2QiiV)}
                  >
                    <LinkButton
                      className={classNames(
                        "__wab_instance",
                        sty.linkButton__yXcj1
                      )}
                      text={"\u2295 Add to cart"}
                      type={"solidOrange"}
                    />

                    <LinkButton
                      className={classNames(
                        "__wab_instance",
                        sty.linkButton__b9ZD
                      )}
                      text={"More Info"}
                      type={"blankOrange"}
                    />
                  </Stack__>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox___67Jvk)}
                >
                  <ProductMedia
                    data-plasmic-name={"productMedia"}
                    data-plasmic-override={overrides.productMedia}
                    className={classNames("__wab_instance", sty.productMedia, {
                      [sty.productMediaslider_second]: hasVariant(
                        $state,
                        "slider",
                        "second"
                      )
                    })}
                  />
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__m2WkJ)}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant($state, "slider", "third")
                      ? CircleOIcon
                      : hasVariant($state, "slider", "second")
                      ? CircleOIcon
                      : DotCircleOIcon
                  }
                  className={classNames(projectcss.all, sty.svg___9ALeP, {
                    [sty.svgslider_second___9ALeP3Xw76]: hasVariant(
                      $state,
                      "slider",
                      "second"
                    ),
                    [sty.svgslider_third___9ALePqRaeT]: hasVariant(
                      $state,
                      "slider",
                      "third"
                    )
                  })}
                  role={"img"}
                />

                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant($state, "slider", "second")
                      ? DotCircleOIcon
                      : CircleOIcon
                  }
                  className={classNames(projectcss.all, sty.svg__anIJy, {
                    [sty.svgslider_first__anIJyOKyp]: hasVariant(
                      $state,
                      "slider",
                      "first"
                    ),
                    [sty.svgslider_second__anIJy3Xw76]: hasVariant(
                      $state,
                      "slider",
                      "second"
                    ),
                    [sty.svgslider_third__anIJyqRaeT]: hasVariant(
                      $state,
                      "slider",
                      "third"
                    )
                  })}
                  role={"img"}
                />

                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant($state, "slider", "third")
                      ? DotCircleOIcon
                      : CircleOIcon
                  }
                  className={classNames(projectcss.all, sty.svg__hg5Qg, {
                    [sty.svgslider_third__hg5QGqRaeT]: hasVariant(
                      $state,
                      "slider",
                      "third"
                    )
                  })}
                  role={"img"}
                />
              </Stack__>
            </React.Fragment>
          )}
        </DataCtxReader__>
      </ProductBox>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "productBox", "text", "productPrice", "productMedia"],
  productBox: ["productBox", "text", "productPrice", "productMedia"],
  text: ["text"],
  productPrice: ["productPrice"],
  productMedia: ["productMedia"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  productBox: typeof ProductBox;
  text: "div";
  productPrice: typeof ProductPriceComponent;
  productMedia: typeof ProductMedia;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCarousel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCarousel__VariantsArgs;
    args?: PlasmicProductCarousel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCarousel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductCarousel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductCarousel__ArgProps,
          internalVariantPropNames: PlasmicProductCarousel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCarousel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCarousel";
  } else {
    func.displayName = `PlasmicProductCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCarousel = Object.assign(
  // Top-level PlasmicProductCarousel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productBox: makeNodeComponent("productBox"),
    text: makeNodeComponent("text"),
    productPrice: makeNodeComponent("productPrice"),
    productMedia: makeNodeComponent("productMedia"),

    // Metadata about props expected for PlasmicProductCarousel
    internalVariantProps: PlasmicProductCarousel__VariantProps,
    internalArgProps: PlasmicProductCarousel__ArgProps
  }
);

export default PlasmicProductCarousel;
/* prettier-ignore-end */
